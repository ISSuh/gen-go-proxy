// Code generated by gen-go-proxy. DO NOT EDIT.

package {{.PackageName}}

import (
	"context"
	"errors"
)

var (
	ErrNilTransactionFactory = errors.New("transaction factory is nil")
	ErrRollbackTransaction   = errors.New("rollback transaction")
)

// Transaction is an interface that defines the methods to manage transactions.
// User should implement this interface to manage transactions.
type Transaction interface {
	// Begin begins the transaction.
	Begin() error

	// Commit commits the transaction.
	Commit() error

	// Rollback rolls back the transaction.
	Rollback() error

	// Regist and returns a context with the transaction.
	Regist(c context.Context) context.Context

	// From sets the transaction from the context.
	From(c context.Context) error
}

// NewTransaction is a function that creates a new transaction.
// User should implement this function to create a new transaction.
//
//		txFatory := func() (proxy.Transaction, error) {
//	   tx, err := NewUserTransaction()
//	   if err != nil {
//	       return nil, err
//	   }
//			return tx, nil
//		}
//
// The function should return a new transaction and an error.
type TransactionFactory func() (Transaction, error)

// TxMiddleware is a function that returns a middleware that manages transactions.
// The middleware creates a new transaction if the transaction is not set in the context.
// If the transaction is set in the context, the middleware manages the transaction.
//
// the middleware is used as follows:
//
//		txFatory := func() (proxy.Transaction, error) {
//	   tx, err := NewUserTransaction()
//	   if err != nil {
//	       return nil, err
//	   }
//			return tx, nil
//		}
//
//		txMiddleware := proxy.TxMiddleware(txFatory)
func TxMiddleware(creator TransactionFactory) func(func(c context.Context) error) func(context.Context) error {
	return func(next func(c context.Context) error) func(context.Context) error {
		return func(c context.Context) error {
			if creator == nil {
				return ErrNilTransactionFactory
			}

			tx, err := creator()
			if err != nil {
				return err
			}

			err = tx.From(c)
			if err == nil {
				return subTransaction(c, next, tx)
			}

			newTransaction(c, next, tx)
			return nil
		}
	}
}

// newTransaction is a function that creates a new transaction.
// The function creates a new transaction and manages the transaction.
func newTransaction(
	c context.Context, next func(c context.Context) error, tx Transaction,
) error {
	err := tx.Begin()
	if err != nil {
		return err
	}

	c = tx.Regist(c)
	if err := next(c); err != nil {
		tx.Rollback()
		return errors.Join(ErrRollbackTransaction, err)
	}

	tx.Commit()
	return nil
}

// subTransaction is a function that manages the transaction.
func subTransaction(
	c context.Context, next func(c context.Context) error, tx Transaction,
) error {
	if err := next(c); err != nil {
		if err := tx.Rollback(); err != nil {
			return err
		}

		return errors.Join(ErrRollbackTransaction, err)
	}
	return nil
}
