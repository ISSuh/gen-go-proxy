// Code generated by simple-gen-proxy. DO NOT EDIT.
// source: {{.SourceFile}}

package {{.PackageName}}

import (
    {{range .Imports -}}
    {{.Alias}} "{{.Path}}"
    {{end}}
)

{{range .Interfaces}}

type {{.ProxyTypeName}}Middleware func(func(context.Context) error) func(context.Context) error

type {{.ProxyTypeName}} struct {
    target {{if .IsDiffrentPackage}}{{.InterfacePackage}}.{{end}}{{.InterfaceName}}
    middlewares []{{.ProxyTypeName}}Middleware
}

func New{{.ProxyTypeName}}(target {{if .IsDiffrentPackage}}{{.InterfacePackage}}.{{end}}{{.InterfaceName}}, middlewares ...{{.ProxyTypeName}}Middleware) *{{.ProxyTypeName}} {
    return &{{.ProxyTypeName}}{
        target: target,
        middlewares: middlewares,
    }
}

{{range .Methods}}
func (p *{{.ProxyTypeName}}) {{.Name}}({{.Params}}) {{.ResultTypes}} {
    {{if .IsTransaction -}}
        {{if .HasResults -}}
            var (
            {{range .Results}}
                {{.ResultVar}} {{.ResultType -}}
            {{end}}
            )
        {{end}}

        f := func({{.HelperContextParam}} context.Context) error {
        {{if .HasResults -}}
            {{.ResultVars}} = p.target.{{.Name}}({{.ParamNamesWithHelperContext}})
            if err != nil {
                return err
            }
        {{else -}}
            p.target.{{.Name}}({{.ParamNames}})
        {{end -}}
            return nil
        }

        for i := range p.middlewares {
		    index := len(p.middlewares) - i - 1
		    f = p.middlewares[index](f)
	    }

        f({{.UserContextParam}})
        {{if .HasResults -}}
            return {{.ResultVars}}
        {{end -}}
    {{else if .IsProxy -}}
        {{if .HasResults -}}
            var (
            {{range .Results}}
                {{.ResultVar}} {{.ResultType -}}
            {{end}}
            )
        {{end}}
        
        f := func({{.HelperContextParam}} context.Context) error {
        {{if .HasResults -}}
            {{.ResultVars}} = p.target.{{.Name}}({{.ParamNames}})
            if err != nil {
                return err
            }
        {{else -}}
            p.target.{{.Name}}({{.ParamNames}})
        {{end -}}
            return nil
        }

        for i := range p.middlewares {
		    index := len(p.middlewares) - i - 1
		    f = p.middlewares[index](f)
	    }

        f(context.TODO())
        {{if .HasResults -}}
            return {{.ResultVars}}
        {{end -}}
    {{else -}}
        {{if .HasResults}} return {{end}} p.target.{{.Name}}({{.ParamNames}})
    {{end -}}
}
{{end}}
{{end}}