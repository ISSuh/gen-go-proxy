// Code generated by simple-gen-proxy. DO NOT EDIT.
// source: {{.SourceFile}}

package {{.PackageName}}

import (
    "database/sql"

    {{range .Imports}}
    {{.Alias}} "{{.Path}}"
    {{end}}
)

{{range .Interfaces}}

type {{.ProxyTypeName}}Transaction func() *sql.DB
type {{.ProxyTypeName}}TxHelper func(c context.Context, f func(c context.Context) error)

type {{.ProxyTypeName}} struct {
    target {{if .IsDiffrentPackage}}{{.InterfacePakcage}}.{{end}}{{.InterfaceName}}
    db {{.ProxyTypeName}}Transaction
    helper {{.ProxyTypeName}}TxHelper
}

func New{{.ProxyTypeName}}(target {{if .IsDiffrentPackage}}{{.InterfacePakcage}}.{{end}}{{.InterfaceName}}, db {{.ProxyTypeName}}Transaction, helper {{.ProxyTypeName}}TxHelper) *{{.ProxyTypeName}} {
    return &{{.ProxyTypeName}}{
        target: target,
        db: db,
        helper: helper,
    }
}

{{range .Methods}}
func (p *{{.ProxyTypeName}}) {{.Name}}({{.Params}}) {{.ResultTypes}} {
    {{if .IsTransaction}}
        db := p.db()
        tx, txErr := db.Begin()
        if txErr != nil {
            panic(txErr)
        }

        {{if .HasResults}}
            var (
            {{range .Results}}
                {{.ResultVar}} {{.ResultType}}
            {{end}}
            )
        {{end}}

        p.helper(c, func(c context.Context) error {
        {{if .HasResults}}
            {{.ResultVars}} = p.target.{{.Name}}({{.ParamNames}})
            if err != nil {
                return err
            }

        {{else}}
            p.target.{{.Name}}({{.ParamNames}})
        {{end}}
            return nil
        })

        {{if .HasResults}}{{.ResultVars}} = {{end}}p.target.{{.Name}}({{.ParamNames}})
        if err != nil {
            if txErr := tx.Rollback(); txErr != nil {
                panic(txErr)
            } 
        } else {
            if txErr := tx.Commit(); txErr != nil {
                panic(txErr)
            }
        }

        {{if .HasResults}}
            return {{.ResultVars}}
        {{end}}
    {{else}}
        {{if .HasResults}} return {{end}} p.target.{{.Name}}({{.ParamNames}})
    {{end}}
}
{{end}}
{{end}}