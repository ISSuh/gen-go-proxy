// proxy_template.go.tmpl
package {{.PackageName}}

import (
    "fmt"
    {{range .Imports}}
    {{.Alias}} "{{.Path}}"
    {{end}}
)

type {{.ProxyTypeName}} struct {
    target {{.InterfaceName}}
}

func New{{.ProxyTypeName}}(target {{.InterfaceName}}) *{{.ProxyTypeName}} {
    return &{{.ProxyTypeName}}{
        target: target,
    }
}

{{range .Methods}}
func (p *{{$.ProxyTypeName}}) {{.Name}}({{.Params}}) {{.Results}} {
    {{if .IsTransaction}}
        fmt.Println("Before {{.Name}} (transaction)")
        
        {{if .HasResults}}
            {{.ResultVars}} := {{end}}p.target.{{.Name}}({{.ParamNames}})
        {{else}}
            p.target.{{.Name}}({{.ParamNames}})
        {{end}}

        fmt.Println("After {{.Name}} (transaction)")

        {{if .HasResults}}
            return {{.ResultVars}}{{end}}
        {{end}}
    {{else}}
        return p.target.{{.Name}}({{.ParamNames}})
    {{end}}
}
{{end}}