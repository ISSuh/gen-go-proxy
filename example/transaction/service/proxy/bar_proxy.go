// Code generated by gen-go-proxy. DO NOT EDIT.
// source: /home/issuh/workspace/my_project/gen-go-proxy/example/transaction/service/bar.go

package proxy

import (
	"context"

	"github.com/ISSuh/gen-go-proxy/example/transaction/dto"
	entity "github.com/ISSuh/gen-go-proxy/example/transaction/entity"
	service "github.com/ISSuh/gen-go-proxy/example/transaction/service"
)

const (
	transactionalAnnotationKeyOnBar string = "transactional"
)

// helper for BarProxy middleware
type BarProxyMiddleware func(func(context.Context) error) func(context.Context) error
type BarProxyMiddlewares []BarProxyMiddleware

// convert BarProxy middleware to raw type
func (a BarProxyMiddlewares) To() []func(func(context.Context) error) func(context.Context) error {
	m := []func(func(context.Context) error) func(context.Context) error{}
	for _, v := range a {
		m = append(m, v)
	}
	return m
}

// helper for BarProxy middleware map about middlewares by aannotation
type BarProxyMiddlewareByAnnotation map[string]BarProxyMiddlewares

// convert BarProxy middleware map to raw type
func (a BarProxyMiddlewareByAnnotation) To() map[string][]func(func(context.Context) error) func(context.Context) error {
	m := map[string][]func(func(context.Context) error) func(context.Context) error{}
	for key, value := range a {
		m[key] = value.To()
	}
	return m
}

// implement proxy for Bar
type BarProxy struct {
	target                   service.Bar
	transactionalMiddlewares []func(func(context.Context) error) func(context.Context) error
}

func NewBarProxy(target service.Bar, middlewares map[string][]func(func(context.Context) error) func(context.Context) error) *BarProxy {
	p := &BarProxy{
		target: target,
	}

	for key, value := range middlewares {
		switch key {

		case transactionalAnnotationKeyOnBar:
			p.transactionalMiddlewares = value
		}
	}

	return p
}

func (p *BarProxy) Create(_userCtx context.Context, dto dto.Bar) (int, error) {
	var (
		r0  int
		err error
	)

	f := func(_helperCtx context.Context) error {
		r0, err = p.target.Create(_helperCtx, dto)
		if err != nil {
			return err
		}
		return nil
	}

	for i := range p.transactionalMiddlewares {
		index := len(p.transactionalMiddlewares) - i - 1
		f = p.transactionalMiddlewares[index](f)
	}

	f(_userCtx)
	return r0, err
}

func (p *BarProxy) Find(_userCtx context.Context, id int) (*entity.Bar, error) {
	return p.target.Find(_userCtx, id)
}
