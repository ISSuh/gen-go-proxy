// Code generated by simple-gen-proxy. DO NOT EDIT.
// source: example/transaction/service/foo.go

package proxy

import (
	"context"

	"github.com/ISSuh/simple-gen-proxy/example/transaction/dto"

	entity "github.com/ISSuh/simple-gen-proxy/example/transaction/entity"

	service "github.com/ISSuh/simple-gen-proxy/example/transaction/service"
)

type FooProxyHelper func(c context.Context, f func(c context.Context) error) error

type FooProxy struct {
	target service.Foo
	tx     FooProxyHelper
}

func NewFooProxy(target service.Foo, tx FooProxyHelper) *FooProxy {
	return &FooProxy{
		target: target,
		tx:     tx,
	}
}

func (p *FooProxy) Create(_userCtx context.Context, dto dto.Foo) (int, error) {
	var (
		r0  int
		err error
	)

	err = p.tx(_userCtx, func(_helperCtx context.Context) error {
		r0, err = p.target.Create(_helperCtx, dto)
		if err != nil {
			return err
		}
		return nil
	})

	return r0, err
}

func (p *FooProxy) Find(_userCtx context.Context, id int) (*entity.Foo, error) {
	return p.target.Find(_userCtx, id)
}

func (p *FooProxy) FooBara(_userCtx context.Context, dto dto.Foo) error {
	var (
		err error
	)

	err = p.tx(_userCtx, func(_helperCtx context.Context) error {
		err = p.target.FooBara(_helperCtx, dto)
		if err != nil {
			return err
		}
		return nil
	})

	return err
}
