// Code generated by simple-gen-proxy. DO NOT EDIT.
// source: /home/issuh/workspace/my_project/gen-tx-proxy/example/transaction/service/foo.go

package proxy

import (
	"context"

	"github.com/ISSuh/simple-gen-proxy/example/transaction/dto"
	entity "github.com/ISSuh/simple-gen-proxy/example/transaction/entity"
	service "github.com/ISSuh/simple-gen-proxy/example/transaction/service"
)

type FooProxyMiddleware func(func(context.Context) error) func(context.Context) error

type FooProxy struct {
	target      service.Foo
	middlewares []FooProxyMiddleware
}

func NewFooProxy(target service.Foo, middlewares ...FooProxyMiddleware) *FooProxy {
	return &FooProxy{
		target:      target,
		middlewares: middlewares,
	}
}

func (p *FooProxy) Create(_userCtx context.Context, dto dto.Foo) (int, error) {
	var (
		r0  int
		err error
	)

	f := func(_helperCtx context.Context) error {
		r0, err = p.target.Create(_helperCtx, dto)
		if err != nil {
			return err
		}
		return nil
	}

	for i := range p.middlewares {
		index := len(p.middlewares) - i - 1
		f = p.middlewares[index](f)
	}

	f(_userCtx)
	return r0, err
}

func (p *FooProxy) Find(_userCtx context.Context, id int) (*entity.Foo, error) {
	return p.target.Find(_userCtx, id)
}

func (p *FooProxy) FooBara(_userCtx context.Context, dto dto.Foo) error {
	var (
		err error
	)

	f := func(_helperCtx context.Context) error {
		err = p.target.FooBara(_helperCtx, dto)
		if err != nil {
			return err
		}
		return nil
	}

	for i := range p.middlewares {
		index := len(p.middlewares) - i - 1
		f = p.middlewares[index](f)
	}

	f(_userCtx)
	return err
}
