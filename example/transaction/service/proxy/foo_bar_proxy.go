// Code generated by gen-go-proxy. DO NOT EDIT.
// source: /home/issuh/workspace/my_project/gen-go-proxy/example/transaction/service/foo_bar.go

package proxy

import (
	"context"

	"github.com/ISSuh/gen-go-proxy/example/transaction/dto"
	entity "github.com/ISSuh/gen-go-proxy/example/transaction/entity"
	service "github.com/ISSuh/gen-go-proxy/example/transaction/service"
)

const (
	transactionalAnnotationKeyOnFooBar string = "transactional"
)

// helper for FooBarProxy middleware
type FooBarProxyMiddleware func(func(context.Context) error) func(context.Context) error
type FooBarProxyMiddlewares []FooBarProxyMiddleware

// convert FooBarProxy middleware to raw type
func (a FooBarProxyMiddlewares) To() []func(func(context.Context) error) func(context.Context) error {
	m := []func(func(context.Context) error) func(context.Context) error{}
	for _, v := range a {
		m = append(m, v)
	}
	return m
}

// helper for FooBarProxy middleware map about middlewares by aannotation
type FooBarProxyMiddlewareByAnnotation map[string]FooBarProxyMiddlewares

// convert FooBarProxy middleware map to raw type
func (a FooBarProxyMiddlewareByAnnotation) To() map[string][]func(func(context.Context) error) func(context.Context) error {
	m := map[string][]func(func(context.Context) error) func(context.Context) error{}
	for key, value := range a {
		m[key] = value.To()
	}
	return m
}

// implement proxy for FooBar
type FooBarProxy struct {
	target                   service.FooBar
	transactionalMiddlewares []func(func(context.Context) error) func(context.Context) error
}

func NewFooBarProxy(target service.FooBar, middlewares map[string][]func(func(context.Context) error) func(context.Context) error) *FooBarProxy {
	p := &FooBarProxy{
		target: target,
	}

	for key, value := range middlewares {
		switch key {

		case transactionalAnnotationKeyOnFooBar:
			p.transactionalMiddlewares = value
		}
	}

	return p
}

func (p *FooBarProxy) Create(_userCtx context.Context, foo dto.Foo, bar dto.Bar) (int, int, error) {
	var (
		r0  int
		r1  int
		err error
	)

	f := func(_helperCtx context.Context) error {
		r0, r1, err = p.target.Create(_helperCtx, foo, bar)
		if err != nil {
			return err
		}
		return nil
	}

	for i := range p.transactionalMiddlewares {
		index := len(p.transactionalMiddlewares) - i - 1
		f = p.transactionalMiddlewares[index](f)
	}

	f(_userCtx)
	return r0, r1, err
}

func (p *FooBarProxy) Find(_userCtx context.Context, fooID int, barID int) (*entity.Foo, *entity.Bar, error) {
	return p.target.Find(_userCtx, fooID, barID)
}
