// Code generated by simple-gen-proxy. DO NOT EDIT.
// source: /home/issuh/workspace/my_project/gen-tx-proxy/example/transaction/service/foo_bar.go

package proxy

import (
	"context"

	"github.com/ISSuh/simple-gen-proxy/example/transaction/dto"
	entity "github.com/ISSuh/simple-gen-proxy/example/transaction/entity"
	service "github.com/ISSuh/simple-gen-proxy/example/transaction/service"
)

const (
	transactionalAnnotationKeyOnFooBar string = "transactional"
)

type FooBarProxyMiddleware func(func(context.Context) error) func(context.Context) error
type FooBarProxyMiddlewareByAnnotation map[string][]FooBarProxyMiddleware

type FooBarProxy struct {
	target                   service.FooBar
	transactionalMiddlewares []FooBarProxyMiddleware
}

func NewFooBarProxy(target service.FooBar, middlewares FooBarProxyMiddlewareByAnnotation) *FooBarProxy {
	p := &FooBarProxy{
		target: target,
	}

	for key, value := range middlewares {
		switch key {

		case transactionalAnnotationKeyOnFooBar:
			p.transactionalMiddlewares = value
		}
	}

	return p
}

func (p *FooBarProxy) Create(_userCtx context.Context, foo dto.Foo, bar dto.Bar) (int, int, error) {
	var (
		r0  int
		r1  int
		err error
	)

	f := func(_helperCtx context.Context) error {
		r0, r1, err = p.target.Create(_helperCtx, foo, bar)
		if err != nil {
			return err
		}
		return nil
	}

	for i := range p.transactionalMiddlewares {
		index := len(p.transactionalMiddlewares) - i - 1
		f = p.transactionalMiddlewares[index](f)
	}

	f(_userCtx)
	return r0, r1, err
}

func (p *FooBarProxy) Find(_userCtx context.Context, fooID int, barID int) (*entity.Foo, *entity.Bar, error) {
	return p.target.Find(_userCtx, fooID, barID)
}
