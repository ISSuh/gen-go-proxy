// Code generated by simple-gen-proxy. DO NOT EDIT.
// source: example/service/foo.go

package proxy

import (
	"database/sql"

	"context"

	"github.com/ISSuh/simple-gen-proxy/example/dto"

	entity "github.com/ISSuh/simple-gen-proxy/example/entity"

	service "github.com/ISSuh/simple-gen-proxy/example/service"
)

type FooProxyTransaction func() *sql.DB

type FooProxy struct {
	target service.Foo
	db     FooProxyTransaction
}

func NewFooProxy(target service.Foo, db FooProxyTransaction) *FooProxy {
	return &FooProxy{
		target: target,
		db:     db,
	}
}

func (p *FooProxy) CreateA(c context.Context, id int, dto dto.ADTO) (*entity.Foo, error) {

	db := p.db()
	tx, txErr := db.Begin()
	if txErr != nil {
		panic(txErr)
	}

	r0, err := p.target.CreateA(c, id, dto)
	if err != nil {
		if txErr := tx.Rollback(); txErr != nil {
			panic(txErr)
		}
	} else {
		if txErr := tx.Commit(); txErr != nil {
			panic(txErr)
		}
	}

	return r0, err

}

func (p *FooProxy) CreateB(c context.Context, id int) (*entity.Bar, error) {

	db := p.db()
	tx, txErr := db.Begin()
	if txErr != nil {
		panic(txErr)
	}

	r0, err := p.target.CreateB(c, id)
	if err != nil {
		if txErr := tx.Rollback(); txErr != nil {
			panic(txErr)
		}
	} else {
		if txErr := tx.Commit(); txErr != nil {
			panic(txErr)
		}
	}

	return r0, err

}

func (p *FooProxy) Barz(c context.Context, id int) (*entity.Foo, *entity.Bar, error) {

	return p.target.Barz(c, id)

}

func (p *FooProxy) Foos(c context.Context, a *entity.Foo, b *entity.Bar) error {

	db := p.db()
	tx, txErr := db.Begin()
	if txErr != nil {
		panic(txErr)
	}

	err := p.target.Foos(c, a, b)
	if err != nil {
		if txErr := tx.Rollback(); txErr != nil {
			panic(txErr)
		}
	} else {
		if txErr := tx.Commit(); txErr != nil {
			panic(txErr)
		}
	}

	return err

}

func (p *FooProxy) FoosBarz(c context.Context) {

	p.target.FoosBarz(c)

}
